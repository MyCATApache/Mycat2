比如一个常见的SQL优化手段是索引，那建什么样的索引会比当前所有执行路径都好？这是我们的SQL优化引擎要解决的问题，也是我们产品比较核心的部分。大家可以看一下这个流程，
前面几步跟MySQL或者其它优化器类似，但后面的候选索引生成，代价评估，优化建议合并等都不一样。我们的输入是一条SQL或者一个SQL workload，输出是对应的优化建议，
比如新建索引、SQL改写等。

SQL优化最关键的是要有全面准确的统计信息作为输入，另外就是它不能是规则式的，因为SQL的执行路径与数据分布有很大的关系。同样一条SQL，数据分布不一样，
实际执行路径可能会完全不一样。SQL优化这块有几个关键点需要强调一下：

（1）全局视角。如果业务SQL非常多，假设有100类SQL(模板化后)，挑选哪些SQL来优化是非常关键的。是对这100类都做优化，还是选出其中一些重要的SQL？
通常会选择性能有问题的SQL优化，但怎么选呢？CloudDBA有全量SQL性能统计数据，会分析出查询效率低且有优化空间的SQL Workload来进行优化。

（2）代价评估(Cost-based Optimizer)。比如一条SQL可能会有多个索引建议，哪个建议是最优的？候选索引生成阶段确定某列是不是可以放到候选索引里，
也需要结合统计信息来评估。这些过程都需要基于代价进行评估，而不是规则。

（3）动态采样。优化器在做路径选择时很重要的一个输入是统计信息，对于我们的What-if optimizer也一样。我们通过动态采样来获取代价评估所需要的统计信息，
包括Cardinality, Frequency还有Histogram等。数据倾斜比较严重的时候，Histogram对做出准确的代价评估非常关键。为了更准确的代价评估，
所以我们实现了一个动态采样系统。
